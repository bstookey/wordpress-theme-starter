// Helper Mixins

// Turn hex to rgba()
@mixin rgba($color, $alpha) {
  $rgba: rgba(red($color), green($color), blue($color), $alpha);
  $argb: argb($rgba);
  background-color: $color;
  background-color: $rgba;
  filter: #{"progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$argb}, endColorstr=#{$argb})"};
  -ms-filter: #{"progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$argb}, endColorstr=#{$argb})"};
}

// Gutter mixin for parent negative margin and child padding
@mixin bs-gutter($bs-gutter, $sp: pos) {
  @if $sp == neg {
    margin-left: -$bs-gutter !important;
    margin-right: -$bs-gutter !important;
  }

  @if $sp == pos {
    padding-left: $bs-gutter !important;
    padding-right: $bs-gutter !important;
  }
}

@mixin global-transition($trans_args: $transition) {
  -webkit-transition: $trans_args;
  -moz-transition: $trans_args;
  -ms-transition: $trans_args;
  -o-transition: $trans_args;
  transition: $trans_args;
}

@mixin aspect-ratio($width: 1, $height: 1) {
  position: relative;

  &:before {
    display: block;
    content: " ";
    width: 100%;
    padding-bottom: calc(($height / $width) * 100%);
  }
}

@mixin linear-gradient($deg: 180deg, $start: $black, $end: transparent) {
  background-image: -webkit-linear-gradient($deg, $start 0%, $end 100%);
  background-image: -moz-linear-gradient($deg, $start 0%, $end 100%);
  background-image: -o-linear-gradient($deg, $start 0%, $end 100%);
  background-image: -ms-linear-gradient($deg, $start 0%, $end 100%);
  background: linear-gradient($deg, $start 0%, $end 100%);
}

@mixin box-shadow(
  $horiz: 0,
  $vert: 0,
  $blur: 12px,
  $spread: 2px,
  $color: rgba(0, 0, 0, 0.15) !important
) {
  -webkit-box-shadow: $horiz $vert $blur $spread $color;
  -moz-box-shadow: $horiz $vert $blur $spread $color;
  box-shadow: $horiz $vert $blur $spread $color;
}

@mixin carat($direction, $size: 0.375rem, $color: #ccc) {
  content: "";
  display: block;
  position: absolute;
  height: 0;
  width: 0;
  @if ($direction == "up") {
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  } @else if ($direction == "down") {
    border-top: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  } @else if ($direction == "left") {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  } @else if ($direction == "right") {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}

@mixin clearfix() {
  &:after,
  &:before {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}
